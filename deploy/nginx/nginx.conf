events {
    worker_connections  1024;
}

http {
# http redirect
  server {
      listen     80;
      server_name  nexus.lcl jenkinc.lcl;

      location / {
          return 301 https://$host$request_uri;
      }
  }

  upstream jenkins {
    keepalive 32;
    server jenkins:8080;
  }

  map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
  }

  server {
    listen 443 ssl;
    http2 on;
    
    ssl_certificate     /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;
    
    server_name         nexus.lcl;
    
    proxy_send_timeout 3600;
    proxy_read_timeout 3600;
    proxy_buffering    off;
    proxy_request_buffering off;
    keepalive_timeout  5 5;
    tcp_nodelay        on;

    # allow large uploads of files
    client_max_body_size 0;

    # optimize downloading files larger than 1G
    #proxy_max_temp_file_size 2G;

    location ~ ^/(v1|v2)/[^/]+/?[^/]+/blobs/ {
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto "https";

      if ($request_method ~* (POST|PUT|DELETE|PATCH|HEAD)) {
        proxy_pass http://nexus:8081/repository/docker-hosted/$request_uri;
      }
      proxy_pass http://nexus:8081/repository/docker/$request_uri;
    }

    location ~ ^/(v1|v2)/ {
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto "https";

      if ($request_method ~* (POST|PUT|DELETE|PATCH)) {
        proxy_pass http://nexus:8081/repository/docker-hosted/$request_uri;
      }
      proxy_pass http://nexus:8081/repository/docker/$request_uri;
    }

    location / {
      # Use IPv4 upstream address instead of DNS name to avoid attempts by nginx to use IPv6 DNS lookup
      proxy_pass http://nexus:8081;
      proxy_pass_header Server;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
  }

  server {
    listen 443 ssl;
    http2 on;
    
    ssl_certificate     /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;
    
    server_name         jenkins.lcl;

    root            /var/run/jenkins/war/;

    access_log      /var/log/nginx/jenkins.access.log;
    error_log       /var/log/nginx/jenkins.error.log;

    ignore_invalid_headers off;

    location ~ "^\/static\/[0-9a-fA-F]{8}\/(.*)$" {
      rewrite "^\/static\/[0-9a-fA-F]{8}\/(.*)" /$1 last;
    }

    location /userContent {
      root /var/lib/jenkins/;
      if (!-f $request_filename){
        rewrite (.*) /$1 last;
        break;
      }
      sendfile on;
    }

    location / {
        sendfile off;
        proxy_pass         http://jenkins;
        proxy_redirect     default;
        proxy_http_version 1.1;

        proxy_set_header   Connection        $connection_upgrade;
        proxy_set_header   Upgrade           $http_upgrade;

        proxy_set_header   Host              $http_host;
        proxy_set_header   X-Real-IP         $remote_addr;
        proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;
        proxy_max_temp_file_size 0;

        client_max_body_size       10m;
        client_body_buffer_size    128k;

        proxy_connect_timeout      90;
        proxy_send_timeout         90;
        proxy_read_timeout         90;
        proxy_request_buffering    off;
    }

  }

# Server for self health checking.
  server {
      server_name nginx;
      client_max_body_size    100M;
      proxy_connect_timeout   360;
      proxy_send_timeout      360;
      proxy_read_timeout      360;
      send_timeout            360;

      location = /health {
          access_log off;
          add_header 'Content-Type' 'application/json';
          return 200 '{"status":"UP"}';
      }

  }
}
